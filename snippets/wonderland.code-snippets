{
    "component-parameter-enum": {
        "body": "${1:name}: Property.enum([${2:'A','B'}], ${3:'A'})$0",
        "description": "adds a component parameter of type enum",
        "scope": "javascript",
        "prefix": "wl:param:enum"
    },
    "component-parameter-float": {
        "body": "${1:name}: Property.float(${2:1.0})$0",
        "description": "adds a component parameter of type float",
        "scope": "javascript",
        "prefix": "wl:param:float"
    },
    "component-parameter-object": {
        "body": "${1:name}: Property.object()$0",
        "description": "adds a component parameter of type object",
        "scope": "javascript",
        "prefix": "wl:param:object"
    },
    "component-parameter-bool": {
        "body": "${1:name}: Property.bool(${2:false})$0",
        "description": "adds a component parameter of type boolean",
        "scope": "javascript",
        "prefix": "wl:param:bool"
    },
    "component-parameter-mesh": {
        "body": "${1:name}: Property.material()$0",
        "description": "adds a component parameter of type material",
        "scope": "javascript",
        "prefix": "wl:param:material"
    },
    "component-parameter-material": {
        "body": "${1:name}: Property.mesh()$0",
        "description": "adds a component parameter of type mesh",
        "scope": "javascript",
        "prefix": "wl:param:mesh"
    },
    "component-parameter-texture": {
        "body": "${1:name}: Property.texture()$0",
        "description": "adds a component parameter of type texture",
        "scope": "javascript",
        "prefix": "wl:param:texture"
    },
    "component-parameter-animation": {
        "body": "${1:name}: Property.animation()$0",
        "description": "adds a component parameter of type animation",
        "scope": "javascript",
        "prefix": "wl:param:animation"
    },
    "component-parameter-Skin": {
        "body": "${1:name}: Property.skin()$0",
        "description": "adds a component parameter of type skin",
        "scope": "javascript",
        "prefix": "wl:param:skin"
    },
    "component-parameter-int": {
        "body": "${1:name}: Property.int($2)$0",
        "description": "adds a component parameter of type int",
        "scope": "javascript",
        "prefix": "wl:param:int"
    },
    "component-parameter-string": {
        "body": "${1:name}: Property.string('$2')$0",
        "description": "adds a component parameter of type string",
        "scope": "javascript",
        "prefix": "wl:param:string"
    },
    "object-get-component": {
        "body": "let ${1:comp} = ${2:this.object}.getComponent(${3:Component});\n$0",
        "description": "gets a component from an object, stored into local variable",
        "scope": "javascript",
        "prefix": "wl:component:get"
    },
    "object-get-member-component": {
        "body": "this.${1:comp} = ${2:this.object}.getComponent(${3:Component});\n$0",
        "description": "gets a component from an object, stored as member",
        "scope": "javascript",
        "prefix": "wl:component:get-member"
    },
    "object-add-component": {
        "body": "let ${1:comp} = ${2:this.object}.addComponent(${3:Component}, {$0}});\n",
        "description": "adds a component to an object, stored into local variable",
        "scope": "javascript",
        "prefix": "wl:component:add"
    },
    "object-add-member-component": {
        "body": "this.${1:comp} = ${2:this.object}.addComponent(${3:Component}, {$0});\n",
        "description": "adds a component to an object, stored as member",
        "scope": "javascript",
        "prefix": "wl:component:add-member"
    },
    "add-object": {
        "body": "let ${1:obj} = WL.scene.addObject(${2:this.object});\n$0",
        "description": "adds an object into the scene",
        "scope": "javascript",
        "prefix": "wl:add-object"
    },
    "add-objects": {
        "body": [
            "let ${1:objects} = WL.scene.addObjects(${2:count}, ${3:this.object}, ${4:componentsPerObject}*$2);",
            "for(let i = 0; i < $1.length; ++i) {",
            "    const o = $1[i];",
            "    o.$0",
            "}"
        ],
        "description": "batch adds objects into the scene and starts a loop to add components for each",
        "scope": "javascript",
        "prefix": "wl:add-objects"
    },
    "Create Wonderland new class based component": {
        "description": "New and empty component from a class",
        "scope": "javascript",
        "prefix": "wl:class-component",
        "body": [
            "import {Component, Property} from '@wonderlandengine/api';",
            "",
            "export class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/} extends Component {",
            "    static TypeName = '$TM_FILENAME_BASE';",
            "    static Properties = {",
            "    }",
            "",
            "    init() {",
            "    }",
            "",
            "    start() {",
            "    }",
            "",
            "    update(dt) {",
            "    }",
            "",
            "};"
        ]
    },
    "Register Wonderland new class based component": {
        "description": "Register component",
        "scope": "javascript",
        "prefix": "wl:register-component",
        "body": ["WL.registerComponent($0);"]
    }
}
